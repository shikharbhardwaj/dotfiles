set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'jiangmiao/auto-pairs'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ervandew/supertab'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'itchyny/lightline.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'LucHermitte/lh-vim-lib'
Plugin 'ctrlpvim/ctrlp.vim'
Bundle 'christoomey/vim-tmux-navigator'
Plugin 'pedrohdz/vim-yaml-folds'

call vundle#end()            " required
filetype plugin indent on    " required
" Enable line numbering
set nu
" Remove clutter from the GUI
set guioptions=ae
" Font (required for lightline)
if has('gui_running')
    set guifont=Source\ Code\ Pro\ for\ Powerline\ Medium\ 10
endif
" Map Esc to something reachable
ino jk <esc>
cno jk <c-c>
vno v <esc>
" Select the colorscheme
colorscheme solarized
" We use a 256 color terminal
let base16colorspace=256
set background=dark

" Set UTF8 encoding
set enc=utf8

" Global indentation settings
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Special settings for HTML files
autocmd FileType html setlocal shiftwidth=2 tabstop=2

set autoread " File change detection
set t_Co=256
set textwidth=80

" Mark the maximum width allowed
set colorcolumn=81
set cursorline
"highlight colorcolumn ctermbg=darkgrey
" Line padding while scrolling
set scrolloff=5
" Clipboard setting
set clipboard=unnamed
" Lightline settings(no git for a reason)
let g:lightline = {
            \ 'colorscheme': 'powerline',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'filename' ] ]
            \ },
            \ 'component_function': {
            \   'readonly': 'LightLineReadonly',
            \   'modified': 'LightLineModified',
            \   'filename': 'LightLineFilename'
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }
function! LightLineModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction
function! LightLineReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return ""
    else
        return ""
    endif
endfunction
function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction
" Split shortcuts
"nnoremap <C-v> :vsp<CR>
nnoremap <C-a> :sp<CR>
set splitbelow
set splitright
" Split navigation with ctrl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" tab completetion on paths
set wildmode=full
" Enable status line
set laststatus=2
" Code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

" Wrap settings
set wrap "turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=… " show ellipsis at breaking
" Map leader to ,
let mapleader=","

" Settings for NERDTree
let g:NERDTreeWinPos = "left"
nnoremap <leader>n :NERDTreeToggle<CR>

" Window title
let &titlestring = "Vim"
if &term == "screen"
    set t_ts=^[k
    set t_fs=^[\
endif
if &term == "screen"
    set title
endif

" Ctags
set tags=tags;
" CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader>. :CtrlPTag<cr>
" Tagbar
set runtimepath^=~/.vim/bundle/tagbar
nnoremap <silent> <Leader>b :TagbarToggle<CR>
let g:tagbar_width = 30
let s:width = 80

" Enable editing encrypted files
" Transparent editing of gpg encrypted files.
augroup encrypted
au!
" First make sure nothing is written to ~/.viminfo while editing
" an encrypted file.
autocmd BufReadPre,FileReadPre      *.gpg set viminfo=
" We don't want a swap file, as it writes unencrypted data to disk
autocmd BufReadPre,FileReadPre      *.gpg set noswapfile
" Switch to binary mode to read the encrypted file
autocmd BufReadPre,FileReadPre      *.gpg set bin
autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
autocmd BufReadPre,FileReadPre      *.gpg let shsave=&sh
autocmd BufReadPre,FileReadPre      *.gpg let &sh='sh'
autocmd BufReadPre,FileReadPre      *.gpg let ch_save = &ch|set ch=2
autocmd BufReadPost,FileReadPost    *.gpg '[,']!gpg --decrypt --default-recipient-self 2> /dev/null
autocmd BufReadPost,FileReadPost    *.gpg let &sh=shsave
" Switch to normal mode for editing
autocmd BufReadPost,FileReadPost    *.gpg set nobin
autocmd BufReadPost,FileReadPost    *.gpg let &ch = ch_save|unlet ch_save
autocmd BufReadPost,FileReadPost    *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
" Convert all text to encrypted text before writing
autocmd BufWritePre,FileWritePre    *.gpg set bin
autocmd BufWritePre,FileWritePre    *.gpg let shsave=&sh
autocmd BufWritePre,FileWritePre    *.gpg let &sh='sh'
autocmd BufWritePre,FileWritePre    *.gpg '[,']!gpg --encrypt --default-recipient-self 2>/dev/null
autocmd BufWritePre,FileWritePre    *.gpg let &sh=shsave
" Undo the encryption so we are back in the normal text, directly
" after the file has been written.
autocmd BufWritePost,FileWritePost  *.gpg silent u
autocmd BufWritePost,FileWritePost  *.gpg set nobin
augroup END

" Show invisibles
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Symbols for showing whitespace
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<
" Tag navigation
function TagJumpForward()
    execute "tag " . expand("<cword>")
    try | foldopen! | catch | | endtry
endfunction

function TagJumpBack()
    try | foldclose! | catch | | endtry
    pop
endfunction

nnoremap <silent> <C-i> :call TagJumpForward()<CR>
nnoremap <silent> <C-t> :call TagJumpBack()<CR>

" Tag support in CtrlP
let g:ctrlp_extensions = ['tag']

" Change to current file directory 
autocmd BufEnter * silent! :lcd%:p:h

" Make with F4
autocmd filetype cpp nnoremap <F4> :!make %:r && './%:r'<CR>
autocmd filetype c nnoremap <F4> :!make %:r && './%:r'<CR>

" Use shift+arrows to copy above or below
nmap <S-Down> Yp
nmap <S-Up> Ykp
" Text movement with arrow keys
nnoremap <Up> :m -2<CR>
nnoremap <Down> :m +1<CR>
" Visual mode
vnoremap <Down> :m '>+1<CR>gv=gv
vnoremap <Up> :m '<-2<CR>gv=gv
nmap <Left> <<
nmap <Right> >>
vmap <Left> <gv
vmap <Right> >gv

let g:UltiSnipsExpandTrigger = "<C-l>"
let g:UltiSnipsSnippetDirectories = ['~/.vim/bundle/vim-snippets/UltiSnips', 'UltiSnips']

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif

" YAML editing
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
let g:indentLine_char = '⦙'
